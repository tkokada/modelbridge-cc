[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "modelbridge"
version = "0.1.0"
description = "A library for hyperparameter optimization and model bridging between micro and macro models"
readme = "README.md"
license = { text = "MIT" }
authors = [
    { name = "Claude Code", email = "claude@anthropic.com" }
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
requires-python = ">=3.12"
dependencies = [
    "GPy>=1.13.2",
    "numpy",
    "pandas",
    "matplotlib",
    "scikit-learn",
    "optuna",
    "toml",
    "scipy"
]

[project.optional-dependencies]
dev = [
    "pytest>=6.0",
    "pytest-cov",
    "pytest-mock",
    "pytest-asyncio",
    "pytest-benchmark",
    "pytest-xdist",
    "hypothesis",
    "ruff",
    "mypy",
    "pyright",
    "pre-commit",
]
examples = [
    "torch>=2.0.0",
    "torchvision>=0.15.0",
]
all = [
    "torch>=2.0.0",
    "torchvision>=0.15.0",
    "pytest>=6.0",
    "pytest-cov",
    "pytest-mock",
    "pytest-asyncio",
    "pytest-benchmark",
    "pytest-xdist",
    "hypothesis",
    "ruff",
    "mypy",
    "pyright",
    "pre-commit",
]

[project.urls]
Homepage = "https://github.com/your-username/claude-modelbridge"
Issues = "https://github.com/your-username/claude-modelbridge/issues"
Repository = "https://github.com/your-username/claude-modelbridge.git"

# Ruff configuration for linting and formatting
[tool.ruff]
target-version = "py312"
line-length = 88
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "N",   # pep8-naming
    "S",   # flake8-bandit
    "T20", # flake8-print
    "SIM", # flake8-simplify
    "RUF", # Ruff-specific rules
]
ignore = [
    "E501",   # line too long, handled by formatter
    "S101",   # use of assert detected
    "S311",   # standard pseudo-random generators are not suitable for cryptographic purposes
    "T201",   # print found
    "B008",   # do not perform function calls in argument defaults
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]  # Allow unused imports in __init__.py
"test_*.py" = ["S101"]    # Allow assert in tests
"example/**/*.py" = ["T201", "T203", "S311", "S603", "S607", "N806", "N812", "RUF001", "RUF003", "C408"]  # Allow print, pprint, subprocess, variable naming, Greek letters in examples

[tool.ruff.lint.isort]
known-first-party = ["modelbridge"]
force-sort-within-sections = true

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"


# MyPy configuration for type checking
[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "GPy.*",
    "optuna.*",
    "sklearn.*",
    "matplotlib.*",
    "pandas.*",
    "toml.*"
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=modelbridge",
    "--cov-report=html",
    "--cov-report=term-missing",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["modelbridge"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
precision = 2

[tool.coverage.html]
directory = "outputs/reports/htmlcov"

[tool.coverage.xml]
output = "coverage.xml"

[tool.uv.pip]
all-binary = ["scipy"]
